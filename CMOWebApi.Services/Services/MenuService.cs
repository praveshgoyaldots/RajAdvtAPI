using AutoMapper;
using CMOWebApi.Core;
using CMOWebApi.Data;
using CMOWebApi.Data.UnitOfWork;
using CMOWebApi.Models.AdminModel;
using CMOWebApi.Models.AutoGeneratedModels;
using CMOWebApi.Services.IServices;
using CMOWebApi.Services.ServiceHelper;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace CMOWebApi.Services.Services
{
    public class MenuService : BaseService, IMenuService
    {
        #region ///   Variable   ///
        private readonly IUnitofWork _uow;
        private readonly IUserPermissionService _userPermissionService;
        #endregion

        #region ///   constructor   ///

        public MenuService(IUnitofWork uow, IUserPermissionService userPermissionService)
        {
            _uow = uow;
            _userPermissionService = userPermissionService;

        }
        #endregion

        #region ///   Method   ///

        /// <summary>
        /// Get All Menu BY Permission
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public ServiceResponse<List<UserMenuViewModel>> GetAll(List<AssignedUserPagePermissionViewModel> model)
        {
            ServiceResponse<List<UserMenuViewModel>> objReturn = new ServiceResponse<List<UserMenuViewModel>>();
            try
            {

                objReturn = GetMenuByPermission(model);
            }
            catch
            {
                objReturn = SetResultStatus<List<UserMenuViewModel>>(null, MessageStatus.Error, false);
            }
            return objReturn;
        }

        /// <summary>
        /// Get All Menu By UserId
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public ServiceResponse<List<UserMenuViewModel>> GetAllByUserId(int userId)
        {
            ServiceResponse<List<UserMenuViewModel>> objReturn = new ServiceResponse<List<UserMenuViewModel>>();
            try
            {
                List<AssignedUserPagePermissionViewModel> objPermission = _userPermissionService.GetAssignedUserPagePermissions(userId).Data;
                objReturn = GetMenuByPermission(objPermission);
            }
            catch
            {
                objReturn = SetResultStatus<List<UserMenuViewModel>>(null, MessageStatus.Error, false);
            }
            return objReturn;
        }

        public ServiceResponse<MenuViewModel> GetById(int id)
        {
            ServiceResponse<MenuViewModel> objReturn = new ServiceResponse<MenuViewModel>();
            try
            {
                tblMenuMaster objData = _uow.GenericRepository<tblMenuMaster>().GetAll(filter: x => x.MenuCode == id).FirstOrDefault();
                Mapper.Initialize(x =>
                {
                    x.CreateMap<tblMenuMaster, MenuViewModel>();
                });
                objReturn.Data = Mapper.Map<tblMenuMaster, MenuViewModel>(objData);
                objReturn = objReturn.Data != null ? SetResultStatus(objReturn.Data, MessageStatus.Success, true) : SetResultStatus<MenuViewModel>(null, MessageStatus.NoRecord, false);
            }
            catch
            {
                objReturn = SetResultStatus<MenuViewModel>(null, MessageStatus.Error, false);
            }
            return objReturn;
        }
        public async Task<ServiceResponse<string>> Create(MenuViewModel model)
        {
            ServiceResponse<string> objReturn = new ServiceResponse<string>();
            try
            {
                model.IsDelete = false;
                model.IsActive = true;
                Mapper.Initialize(x =>
                {
                    x.CreateMap<MenuViewModel, tblMenuMaster>();
                });

                tblMenuMaster objMenu = Mapper.Map<MenuViewModel, tblMenuMaster>(model);
                tblMenuMaster objData = await _uow.GenericRepository<tblMenuMaster>().AddAsync(objMenu);
                _uow.save();
                //update MenuCode
                objData.MenuCode = objData.MenuId;
                await _uow.GenericRepository<tblMenuMaster>().UpdateAsync(objData);
                _uow.save();
                return SetResultStatus(objData.MenuCode.ToString(), MessageStatus.Success, true);

            }
            catch (Exception ex)
            {
                return SetResultStatus(string.Empty, MessageStatus.Error, false);
            }
        }

        public async Task<ServiceResponse<string>> Edit(MenuViewModel model)

        {
            ServiceResponse<string> objReturn = new ServiceResponse<string>();
            try
            {
                model.IsDelete = false;
                model.IsActive = true;
                Mapper.Initialize(x =>
                {
                    x.CreateMap<MenuViewModel, tblMenuMaster>();
                });

                tblMenuMaster objMenu = Mapper.Map<MenuViewModel, tblMenuMaster>(model);
                await _uow.GenericRepository<tblMenuMaster>().UpdateAsync(objMenu);
                _uow.save();
                return SetResultStatus(model.MenuCode.ToString(), MessageStatus.Success, true);
            }
            catch
            {
                return SetResultStatus(string.Empty, MessageStatus.Error, false);
            }
        }


        /// <summary>
        /// Get Menu by Permission
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        private ServiceResponse<List<UserMenuViewModel>> GetMenuByPermission(List<AssignedUserPagePermissionViewModel> model)
        {
            ServiceResponse<List<UserMenuViewModel>> objReturn = new ServiceResponse<List<UserMenuViewModel>>();
            try
            {
                List<UserMenuViewModel> objResult = new List<UserMenuViewModel>();
                //UserMenuViewModel objDeafult = new UserMenuViewModel();
                //objDeafult.displayName = "Dashboard";
                //objDeafult.iconName = "dashboard";
                //objDeafult.children = new List<UserMenuViewModel>(){
                //        new UserMenuViewModel(){ displayName = "State Dashboard",iconName = "vertical_split", route ="cmdashboard"} ,
                //        new UserMenuViewModel(){ displayName = "CMIS Dashboard",iconName = "vertical_split" ,route ="cmis-dashboard"}};
                //objResult.Add(objDeafult);

                if (model != null && model.Count > 0)
                {
                    // Parrent Menuork
                    foreach (var parrentItem in model.Where(x => x.ViewPermission == true && !string.IsNullOrEmpty(x.DefaultUrl)).GroupBy(o => new { o.ApplicationCode }))
                    {
                        UserMenuViewModel objUserMenu = new UserMenuViewModel();
                        objUserMenu.displayName = parrentItem.FirstOrDefault().DisplayTitle;
                        objUserMenu.iconName = string.IsNullOrEmpty(parrentItem.FirstOrDefault().AppIcon) ? "trip_origin" : parrentItem.FirstOrDefault().AppIcon;
                        objUserMenu.children = objUserMenu.children ?? new List<UserMenuViewModel>();
                        //Add child items                        
                        foreach (var childItem in parrentItem.OrderBy(x => x.MenuTitle).Where(x => x.ApplicationCode == parrentItem.FirstOrDefault().ApplicationCode && !string.IsNullOrEmpty(x.DefaultUrl)))
                        {
                            UserMenuViewModel objUserMenuChild = new UserMenuViewModel();
                            //Check if Sub child Menu item  Exist
                            if (childItem.MenuTitle.Contains('~') && objUserMenu.children != null && objUserMenu.children.Where(x => x.displayName == childItem.MenuTitle.Split('~')[0]).ToList().Count == 0)
                            {
                                if (objUserMenuChild != null && string.IsNullOrEmpty(objUserMenuChild.displayName))
                                {
                                    objUserMenuChild.displayName = childItem.MenuTitle.Split('~')[0];
                                    objUserMenuChild.iconName = string.IsNullOrEmpty(childItem.AppIcon) ? "fiber_smart_record" : childItem.AppIcon;
                                }
                                foreach (var subChildItem in parrentItem.OrderBy(x => x.MenuTitle).Where(x => x.ViewPermission == true && objUserMenuChild.displayName == x.MenuTitle.Split('~')[0]))
                                {
                                    if (subChildItem.MenuTitle.Contains('~') && objUserMenuChild.displayName == subChildItem.MenuTitle.Split('~')[0])
                                    {
                                        objUserMenuChild.children = objUserMenuChild.children ?? new List<UserMenuViewModel>();

                                        if (!objUserMenuChild.children.Exists(x => x.displayName.Equals(subChildItem.MenuTitle.Split('~')[1])))
                                        {
                                            UserMenuViewModel objUserMenuSubChild = new UserMenuViewModel();
                                            objUserMenuSubChild.displayName = subChildItem.MenuTitle.Split('~')[1];
                                            objUserMenuSubChild.iconName = string.IsNullOrEmpty(subChildItem.MenuIcon) ? "vertical_split" : subChildItem.MenuIcon;
                                            objUserMenuSubChild.route = subChildItem.DefaultUrl;
                                            // Add Sub Children menu in Children
                                            objUserMenuChild.children.Add(objUserMenuSubChild);
                                        }
                                    }
                                }
                                objUserMenu.children.Add(objUserMenuChild);
                            }
                            // Add Childern in Parrent
                            else if (objUserMenu.children == null || objUserMenu.children.Where(x => x.displayName == childItem.MenuTitle.Split('~')[0]).ToList().Count == 0)
                            {
                                objUserMenuChild.displayName = childItem.MenuTitle;
                                objUserMenuChild.iconName = string.IsNullOrEmpty(childItem.MenuIcon) ? "vertical_split" : childItem.MenuIcon; ;
                                objUserMenuChild.route = childItem.DefaultUrl;
                                objUserMenu.children.Add(objUserMenuChild);
                            }
                        }
                        // Add Parent 
                        if (objUserMenu.children == null)
                        {
                            objUserMenu.route = parrentItem.FirstOrDefault().PageUrl;
                        }
                        objResult.Add(objUserMenu);
                    }
                    if (objResult.Count > 0)
                    {
                        objReturn = SetResultStatus(objResult, MessageStatus.Success, true);
                    }
                    else
                    {
                        objReturn = SetResultStatus<List<UserMenuViewModel>>(null, MessageStatus.NoRecord, false);
                    }
                }
                else if (objResult != null && objResult.Count > 0)
                {
                    objReturn = SetResultStatus<List<UserMenuViewModel>>(objResult, MessageStatus.NoRecord, false);
                }
                else
                {
                    objReturn = SetResultStatus<List<UserMenuViewModel>>(null, MessageStatus.NoRecord, false);
                }
            }
            catch (Exception ex)
            {
                CreateLogHelper.CreateErrorLogFile("MenuService/ GetMenuByPermission", ex, JsonConvert.SerializeObject(model));
                objReturn = SetResultStatus<List<UserMenuViewModel>>(null, MessageStatus.InvalidData, false, ex.Message);
            }
            return objReturn;
        }
        #endregion

    }
}
